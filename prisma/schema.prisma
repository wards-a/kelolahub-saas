// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id           String          @id @default(cuid())
  name         String
  description  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  members      ProjectMember[]
  tasks        Task[]
}

model ProjectMember {
  id           String          @id @default(cuid())
  role         String          @default("member")
  
  // Relasi: Setiap anggota terhubung ke satu User
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  
  // Relasi: Setiap anggota terhubung ke satu Project
  projectId    String
  project      Project         @relation(fields: [projectId], references: [id])
  
  @@unique([userId, projectId])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime? @map("due_date")
  status      String    @default("To Do")
  priority    String    @default("Low")
  
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  
  assigneeId  String?   @map("assignee_id")
  assignee    User?     @relation(name: "AssignedTasks", fields: [assigneeId], references: [id])
  
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("tasks")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  
  projects      ProjectMember[]
  assignedTasks Task[]          @relation(name: "AssignedTasks")

  @@map("users")
}

model Todo {
  id        String   @id @default(cuid())
  text      String  
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("todos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @map("session_token")
  userId       String    @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}